name: DotNetBuild

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      ApplicationName:
        required: true
        type: string
      GithubRunnerGroupName:
        default: 'ubuntu-latest'
        required: false
        type: string
      DotNetVersion:
        default: '6.0.x'
        required: false
        type: string
      ContainerTag:
        required: true
        type: string
      DockerFilePath:
        default: './Api/Dockerfile'
        required: false
        type: string
      BuildArtifactRetentionDays:
        default: 3
        required: false
        type: number
jobs:
  build:
    runs-on: ${{ inputs.GithubRunnerGroupName }}

    steps:
    - uses: actions/checkout@v2

    # Setup .net
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ inputs.DotNetVersion }}

    # Setup docker build X so that we can build and export the image to a tar file
    - name: 'Set up docker build x'
      uses: docker/setup-buildx-action@v1
    
    - name: 'Add Tmp/ApplicationName folder  before build'
      run: mkdir -p /tmp/${{ inputs.ApplicationName }}
      
    - name: 'ContainerTag input to dotnetbuild'
      run: echo ${{ inputs.ContainerTag }} 
      
    # Build docker image and export to a .tar file
    - name: Build and export image to .tar file
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ${{ inputs.DockerFilePath }}
        tags: ${{ inputs.ContainerTag }}, ${{ inputs.ApplicationName }}:${{github.run_number}}, ${{ inputs.ApplicationName }}:${{github.sha}}
        
        #outputs: type=docker,dest=/tmp/image.tar
        outputs: type=docker,dest=/tmp/${{ inputs.ApplicationName }}/image.tar
        
    - name: 'Tmp After build'
      run: ls -la /tmp/${{ inputs.ApplicationName }}
    
    # Upload the image tar file so that we can use it to deploy to multiple environments
    - name: Upload image .tar file to Github artifacts
      uses: actions/upload-artifact@v2
      with:
        name: app
        path: '/tmp/${{ inputs.ApplicationName }}/image.tar'
        retention-days: ${{ inputs.BuildArtifactRetentionDays }}

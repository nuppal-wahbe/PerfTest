name: DotNetBuild

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      ApplicationName:
        required: true
        type: string
      GithubRunnerGroupName:
        default: 'windows-2019'
        required: false
        type: string
      DotNetVersion:
        default: '4.8'
        required: false
        type: string
      ContainerTag:
        required: true
        type: string
      DockerFilePath:
        default: './Api/Dockerfile'
        required: false
        type: string
      BuildArtifactRetentionDays:
        default: 3
        required: false
        type: number
      
      #aro deployment project name
      AroProjectName:
        required: true
        type: string
    secrets:
      CONTAINER_REGISTRY_LOGIN_SERVER:
        required: true
      CONTAINER_REGISTRY_USERNAME:
        required: true
      CONTAINER_REGISTRY_PASSWORD:
        required: true
      #aro deployment secrets  
      OPENSHIFT_SERVER_URL:
        required: true
      OPENSHIFT_TOKEN:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_CLIENT_ID:
        required: true
      AZURE_CLIENT_SECRET:
        required: true
jobs:
  build:
    runs-on: ${{ inputs.GithubRunnerGroupName }}

    steps:
    - uses: actions/checkout@v2

    # Setup MSBuild
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1
   
    # Setup NuGet
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.0.5

    # Setup docker build X so that we can build and export the image to a tar file
    - name: Build
      run: |
        docker build -t ${{ inputs.ApplicationName }} .
    
    - name: docker images
      run: docker images
      
    - name: 'ContainerTag input to dotnetbuild'
      run: echo ${{ inputs.ContainerTag }} 
   
    # todo clean up deployment to ACR
    # Set the docker image tag to the environmentally specific ccontainer registry server tag
    - name: Set docker image tag to environmentally specific version for container registry
      run: docker tag ${{ inputs.ContainerTag }} ${{secrets.CONTAINER_REGISTRY_LOGIN_SERVER}}/${{ inputs.ContainerTag }}
      
    # Login to Azure Container registry
    - name: Login to Azure Container registry
      uses: azure/docker-login@v1
      with:
         login-server: ${{secrets.CONTAINER_REGISTRY_LOGIN_SERVER}}
         username: ${{secrets.CONTAINER_REGISTRY_USERNAME}}
         password: ${{secrets.CONTAINER_REGISTRY_PASSWORD}}

      # Push Docker image to Azure Container Registry
    - name: Push Docker image to Azure Container Registry
      run: docker push ${{secrets.CONTAINER_REGISTRY_LOGIN_SERVER}}/${{ inputs.ContainerTag }}
      
         
        
    #- name: 'Set up docker build x'
    #  uses: docker/setup-buildx-action@v1
    
    #- name: 'Add Tmp/ApplicationName folder  before build'
    #  run: mkdir -p /tmp/${{ inputs.ApplicationName }}
      
    
      
  




      
    # Build docker image and export to a .tar file
    #- name: Build and export image to .tar file
    #  uses: docker/build-push-action@v2
    # with:
    #    context: .
    #    file: ${{ inputs.DockerFilePath }}
    #    tags: ${{ inputs.ContainerTag }}, ${{ inputs.ApplicationName }}:${{github.run_number}}, ${{ inputs.ApplicationName }}:${{github.sha}}
        
        #outputs: type=docker,dest=/tmp/image.tar
    #    outputs: type=docker,dest=/tmp/${{ inputs.ApplicationName }}/image.tar
        
    #- name: 'Tmp After build'
    #  run: ls -la /tmp/${{ inputs.ApplicationName }}
    
    # Upload the image tar file so that we can use it to deploy to multiple environments
    #- name: Upload image .tar file to Github artifacts
    #  uses: actions/upload-artifact@v2
    #  with:
    #    name: app
    #    path: '/tmp/${{ inputs.ApplicationName }}/image.tar'
    #   #retention-days: ${{ inputs.BuildArtifactRetentionDays }}

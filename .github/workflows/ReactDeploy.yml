name: ReactDeploy

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      GithubRunnerGroupName:
        default: "linux-hosting-nonprod"
        required: false
        type: string
      Environment:
        required: true
        type: string
      ApplicationName:
        required: true
        type: string
      AppRouteHost:
        required: true
        type: string
    secrets:
      CONTAINER_REGISTRY_LOGIN_SERVER:
        required: true
      CONTAINER_REGISTRY_USERNAME:
        required: true
      CONTAINER_REGISTRY_PASSWORD:
        required: true
      OPENSHIFT_SERVER_URL:
        required: true
      OPENSHIFT_TOKEN:
        required: true

jobs:
  deploy:
    environment: ${{ inputs.Environment }}
    runs-on: ${{ inputs.GithubRunnerGroupName }}

    steps:
      # Downloads container image from artifacts
      - name: download image .tar file from Github artifacts
        uses: actions/download-artifact@v2.0.6
        with:
          name: react-${{ inputs.Environment }}
          path: /tmp

      # Load docker image from .tar file
      - name: Load docker image from .tar file
        run: docker load --input /tmp/image-${{ inputs.Environment }}.tar

      # Set the docker image tag to the environmentally specific ccontainer registry server tag
      - name: Set docker image tag to environmentally specific version for container registry
        run: docker tag react-${{ inputs.Environment }} ${{secrets.CONTAINER_REGISTRY_LOGIN_SERVER}}/${{ inputs.ApplicationName }}-${{ inputs.Environment }}:${{ github.run_id }}

      # Login to Azure Container registry
      - name: Login to Azure Container registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{secrets.CONTAINER_REGISTRY_LOGIN_SERVER}}
          username: ${{secrets.CONTAINER_REGISTRY_USERNAME}}
          password: ${{secrets.CONTAINER_REGISTRY_PASSWORD}}

      # Push Docker image to Azure Container Registry
      - name: Push Docker image to Azure Container Registry
        run: docker push ${{secrets.CONTAINER_REGISTRY_LOGIN_SERVER}}/${{ inputs.ApplicationName }}-${{ inputs.Environment }}:${{ github.run_id }}

      # Login to OpenShift
      - name: Login to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER_URL }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ inputs.ApplicationName }}-${{ inputs.Environment }}

          # Create Azure Container Registry secret
      - name: Create Azure Container Registry secret
        run: >
          oc create secret docker-registry
          --docker-server=${{ secrets.CONTAINER_REGISTRY_LOGIN_SERVER }}
          --docker-username=${{ secrets.CONTAINER_REGISTRY_USERNAME }}
          --docker-password=${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
          --docker-email=unused
          acr-secret --dry-run=client --save-config -o yaml > acr-secret.yaml

      # Add Azure Container Registry secret
      - name: Add Azure Container Registry secret
        run: >
          oc apply -f acr-secret.yaml

      # # Create service principal secret
      # - name: Create service principal secret
      #   run: >
      #     oc create secret generic
      #     --from-literal=AZURE_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}
      #     --from-literal=AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}
      #     --from-literal=AZURE_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}
      #     service-principal --dry-run=client --save-config -o yaml > service-principle.yaml

      # # Add Service Principle secret
      # - name: Add Service Principle secret
      #   run: >
      #     oc apply -f service-principle.yaml

      # Deploy our sample application with oc.
      # This will take down all old deployments before creating a new deployment
      - name: Create new application in Openshift
        if: always()
        id: oc-new-app
        uses: redhat-actions/oc-new-app@v1
        with:
          app_name: ${{ inputs.ApplicationName }}-${{ inputs.Environment }}
          port: 8080
          namespace: ${{ inputs.ApplicationName }}-${{ inputs.Environment }}
          image: ${{secrets.CONTAINER_REGISTRY_LOGIN_SERVER}}/${{ inputs.ApplicationName }}-${{ inputs.Environment }}:${{ github.run_id }}
          image_pull_secret_name: acr-secret

      # Login to OpenShift
      - name: Login to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER_URL }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ inputs.ApplicationName }}-${{ inputs.Environment }}

          # Create ARO Https Route
      - name: Create ARO Https Route
        run: >
          oc create route edge ${{ inputs.ApplicationName }}-${{ inputs.Environment }}-https --service=${{ inputs.ApplicationName }}-${{ inputs.Environment }} --hostname=${{ inputs.AppRouteHost }} --namespace=${{ inputs.ApplicationName }}-${{ inputs.Environment }} --port=8080 --insecure-policy='Allow' --path='/'

    # # Add the environment variables from the service principal OpenShift Secret so the app can use the service principal
    # - name: ADD service principal ENV variable to new app deployment
    #   run: oc set env deployment/${{inputs.ApplicationName}} --from=secret/service-principal --namespace=${{ inputs.ApplicationName }}-${{ inputs.Environment }}

    # # Add the environment variable for environment (Dev, test, prod, etc.)
    # - name: ADD Env variable for Environment (Dev, Test, Prod, etc.)
    #   run: oc set env deployment/${{inputs.ApplicationName}} Environment=${{ inputs.Environment }}
